"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8670],{6338:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/06/17/external-and-internal-assault-cube","metadata":{"permalink":"/REwithGraffioh/2022/06/17/external-and-internal-assault-cube","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-17-external-and-internal-assault-cube/index.md","source":"@site/blog/2022-06-17-external-and-internal-assault-cube/index.md","title":"External and Internal Cheats (Basics)","description":"That will be a long post, so get Ready!","date":"2022-06-17T21:20:00.000Z","formattedDate":"June 17, 2022","tags":[{"label":"game-hacking","permalink":"/REwithGraffioh/tags/game-hacking"},{"label":"reversing","permalink":"/REwithGraffioh/tags/reversing"},{"label":"journey","permalink":"/REwithGraffioh/tags/journey"},{"label":"assault-cube","permalink":"/REwithGraffioh/tags/assault-cube"}],"truncated":false,"authors":[],"frontMatter":{"title":"External and Internal Cheats (Basics)","tags":["game-hacking","reversing","journey","assault-cube"],"date":"2022-06-17T21:20"},"nextItem":{"title":"Reversing Assault Cube (v1.2.0.2)","permalink":"/REwithGraffioh/2022/06/09/reversing-assault-cube"}},"content":"That will be a long post, so get Ready!\\r\\n\\r\\nExternal and Internal are two types of Cheats, both of them are good, and of course they have pros and cons.\\r\\n\\r\\nI\'m gonna explain what I know so far about these two types in a very basic way, with cheat examples, I might say something wrong, so suggestion are strongly accepted (twitter: [@graffioh](https://twitter.com/graffioh) or Discord: Graffioh#2823).\\r\\n\\r\\n(Assault Cube v. 1.2.0.2)\\r\\n\\r\\n**External Cheat**\\r\\n\\r\\nThe External cheat will run in a separate process than the game hacked.\\r\\n\\r\\nWhen We are external, We are going to use the Windows API, our best friend will be [MSDN](https://docs.microsoft.com), You MUST use it, one of the most important thing for a programmer is to read the documentation, everything is basically written there, so no execuses.\\r\\n\\r\\nThe template is basically this:\\r\\n\\r\\n    // Get Process ID\\r\\n\\r\\n    // Get Module Address\\r\\n\\r\\n    // Open the Process\\r\\n\\r\\n    // Read or Write to that address\\r\\n\\r\\nBasically We Get the Process ID with GetProcID function, the module base with GetModule (both of these func will be explained later), and the Proc ID enable us to open the process.\\r\\n\\r\\n![1](./1.PNG)\\r\\n\\r\\nWith that We are going to operate on the Memory.\\r\\n\\r\\nBefore overwriting the health We need to Open the Process using the ID, after that lets declare localPlayer using the module Base + offset (found by reversing the game).\\r\\nNow We need the health Address to write to it, the offset is already reversed, but It\'s a multi-level pointer so let\'s use findDMAAddy function (by Fleep from Guided Hacking) and we can calculate the pointer by doing that.\\r\\n\\r\\n![2](./2.PNG)\\r\\n\\r\\nnow We can use ReadProcessMemory to read the actual health value, and WriteProcessMemory to overwrite the value.\\r\\n\\r\\n(everything about ReadProcessMemory,WriteProcessMemory,OpenProcess and others is explained on msdn documentation).\\r\\n\\r\\n![3](./3.PNG)\\r\\n\\r\\nI hope everything makes sense until now.\\r\\n\\r\\nNow let\'s go on our implemented functions to get the Process ID, the Module Base address and the multi-level pointer.\\r\\n\\r\\nThe basic concept that are needed are: \\r\\n\\r\\n1) [What is a process](https://www.tutorialspoint.com/what-is-a-process-in-operating-system): a process is an istance of an executable that is running on our PC.\\r\\n\\r\\n2) What is an Handle: an handle will give us the ability to manage the \\"access\\" permissions for the process.\\r\\n\\r\\n3) What is a Snapshot: a snapshot is just a \\"screenshot\\" (or a snapshot) of the current active processes\\r\\n\\r\\nFunctions:\\r\\n\\r\\n+ *GetProcID*\\r\\n\\r\\n    For the process ID We will use a snapshot of the current active processes, and with that snapshot, We can iterate through it and find the correct process by using his .exe name.\\r\\n\\r\\n    ![getprocid](./getprocid.PNG)\\r\\n\\r\\n+ *GetModule*\\r\\n    \\r\\n    This is really similar to GetProcID but there the snapshot will be a little different, but the mechanism is the same.\\r\\n\\r\\n     ![getmodule](./getmodule.PNG)\\r\\n\\r\\n+ FindDMAAddy\\r\\n\\r\\n    A simple and powerful function, by passing the handle to the process, the base pointer and the offsets, it will calculate the multi-level pointer with a for loop and ReadProcessMemory. \\r\\n\\r\\n    ![finddmaaddy](./finddmaaddy.PNG)\\r\\n\\r\\nThats it, if you want a really good starting tutorial for external go [there](https://www.unknowncheats.me/forum/programming-for-beginners/267073-coding-hacking-introduction-guide-practical-external-game-hacking.html).\\r\\n\\r\\n**Internal Cheat**\\r\\n\\r\\nOh now We are on the juicy part.\\r\\n\\r\\nWhen We are internal is all about pointers, and as the opposite to the external cheat, it will run inside the game with an injected DLL (a dll is a set of data and code that can be used inside a program).\\r\\n\\r\\nThe injector used is the [Guided Hacking one](https://guidedhacking.com/resources/guided-hacking-dll-injector.4/) .\\r\\n\\r\\nFor me this is really really easy compared to the external counterpart, but It\'s really hard to master it.\\r\\n\\r\\nWe need to create a thread, and in that thread We are gonna run the hack \\r\\n\\r\\n    DWORD WINAPI MainThread(HMODULE hModule)\\r\\n    {\\r\\n        ...\\r\\n    }\\r\\n\\r\\n(remember I\'m still not expert so I don\'t really know how the good hackers setups the code).\\r\\n\\r\\nSo from there, We need only to get the module base address by doing:\\r\\n\\r\\n![moduleBase](./modulebaseint.PNG)\\r\\n\\r\\nAnd the local player:\\r\\n\\r\\n![localplayer](./localplayerint.PNG)\\r\\n\\r\\nI\'m used to do a toggle \\"menu\\" like this where We can separate each functionality like overwriting health, overwriting ammo, no recoil and more:\\r\\n\\r\\n![togglesetupint](./togglesetupint.PNG)\\r\\n\\r\\nNow We will continous write the new health value:\\r\\n\\r\\n![writehealthint](./writehealthint.PNG)\\r\\n\\r\\nI don\'t really know what to explain in this part, everything is straightforward with some practice.\\r\\n\\r\\nIf you are concerned about pointers, by doing for example \\\\*(int\\\\*) We are casting the address to an int pointer and after that we dereference it to write the value on the address.Almoist everything is done by doing that play with the pointers.\\r\\n\\r\\n*Additional Notes:* \\r\\n- uintptr_t type is for portability, it works both for 32 and 64 bit compared to DWORD that only works for 32 bit architecture.\\r\\n\\r\\n- GetModuleHandle(NULL) automatically get us the .exe module.\\r\\n\\r\\n- Always close Handles and \\"free\\" the thread after we use it.\\r\\n\\r\\nAgain, this is a basic basic start, but I wanted to share it.\\r\\n\\r\\n**CONCLUSIONS**\\r\\n\\r\\nMaking cheat is fun, no doubt, you can basically do whatever you want modifying the game.\\r\\n\\r\\nSelling the cheats or using them is a very scummy move and my goal is to prevent that.\\r\\n\\r\\nIf you are interested you can follow [Guided Hacking Bible](https://guidedhacking.com/threads/ghb0-game-hacking-bible-introduction.14450/) path or go to [Unknown Cheats](https://www.unknowncheats.me/forum/index.php) and search things.\\r\\n\\r\\nEverything is up to you, I\'m doing this for educational purpose.\\r\\n\\r\\n![twowaysmeme](./memetwoways.PNG)"},{"id":"/2022/06/09/reversing-assault-cube","metadata":{"permalink":"/REwithGraffioh/2022/06/09/reversing-assault-cube","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-09-reversing-assault-cube/index.md","source":"@site/blog/2022-06-09-reversing-assault-cube/index.md","title":"Reversing Assault Cube (v1.2.0.2)","description":"Assault Cube is an Open Source FPS game, now it\'s outdated, but for practicing game hacking is really good, because the reversing part is easy (except maybe for some functions).","date":"2022-06-09T14:00:00.000Z","formattedDate":"June 9, 2022","tags":[{"label":"game-hacking","permalink":"/REwithGraffioh/tags/game-hacking"},{"label":"reversing","permalink":"/REwithGraffioh/tags/reversing"},{"label":"journey","permalink":"/REwithGraffioh/tags/journey"},{"label":"assault-cube","permalink":"/REwithGraffioh/tags/assault-cube"}],"truncated":false,"authors":[],"frontMatter":{"title":"Reversing Assault Cube (v1.2.0.2)","tags":["game-hacking","reversing","journey","assault-cube"],"date":"2022-06-09T14:00"},"prevItem":{"title":"External and Internal Cheats (Basics)","permalink":"/REwithGraffioh/2022/06/17/external-and-internal-assault-cube"},"nextItem":{"title":"The journey so far","permalink":"/REwithGraffioh/journey-1"}},"content":"Assault Cube is an Open Source FPS game, now it\'s outdated, but for practicing game hacking is really good, because the reversing part is easy (except maybe for some functions).\\r\\n\\r\\nWhen reversing a game, We don\'t mind if the cheat is gonna be External or Internal (maybe I will do a post explaining it based on my knowledge in the future), both of them have pros and cons, and both of them are really similar when We talk about coding the cheat.\\r\\n\\r\\nAssault Cube cheat table (for Cheat Engine):\\r\\n\\r\\n![AssaultCubeCheatTable](./assaultcubeCT.PNG)\\r\\n\\r\\nThe goal is to get a cheat table like that, it\'s not complete, but you can do a lot of things with these pointers and offsets.\\r\\n\\r\\nRemember, there are more ways to get the same result, even in reversing.\\r\\n\\r\\nI will try to explain how to get some good pointers/offsets to work with but I will not go too in depth, as there are a lot of good resources online like [Guided Hacking](https://guidedhacking.com/) and [Unknown Cheats](https://www.unknowncheats.me/forum/index.php).\\r\\n\\r\\n## From beginner to advanced:\\r\\n\\r\\n1) **BEGINNER** (Local player and Health):\\r\\n\\r\\nThe basic way is through Cheat Engine and \\"find out what accesses this address\\", but there are other ways for example with REClass.Net.\\r\\n\\r\\nWe gonna start with a basic scan for the health, using granades and decreasing our health, by doing that and after some hits we will find something like this:\\r\\n\\r\\n![AssaultCubeScanHealth](./scanhealth1.png)\\r\\n\\r\\nNow we need a pointer to that otherwise everytime We restart the game, that address is gonna change, and We will need to do this process again.\\r\\n\\r\\nTo find a pointer do a pointer scan with pointermaps or as you want.\\r\\n\\r\\nNow that We have a pointer, We have the offset too (in our case 0xF8), and with It We can finally modify our health with our cheat.\\r\\n\\r\\nThrough health you can find the local player too.\\r\\n\\r\\n![AssaultCubeScanHealth](./examplehealth1.png)\\r\\n\\r\\nWith the local player + offsets We can basically access every properties of that particular class.\\r\\n\\r\\n2) **INTERMEDIATE** (Current ammo and Weapon Damage):\\r\\n\\r\\nWe gonna use REClass.Net, a powerful tool to find offsets based on local player (in this case).\\r\\n\\r\\nbefore REClass just scan your ammo that you see for your current weapon type, for example rifle ammo and after that you will find the pointer.\\r\\n\\r\\nNow that We have the rifle ammo ptr, We can find the current weapon offset by reversing with \\"Multi-level pointer base calculation\\".\\r\\n\\r\\nFor reference the calculation is like this (took this formula from Guided Hacking):\\r\\n\\r\\n    Address = Value = ?\\r\\n    base ptr -> address + offset 4 = address\\r\\n    base ptr -> address + offset 3 = address\\r\\n    base ptr -> address + offset 2 = address\\r\\n    static base -> address + offset 1 = address\\r\\n\\r\\nAnd with some scans We have this:\\r\\n\\r\\n    00FCA190 = Value = 20\\r\\n    00FCA474 -> 00FCA190 + 0 = 00FCA190\\r\\n    00FCA3B4 -> 00FCA460 + 14 = 00FCA474\\r\\n    ac_client.exe+10F4F4 -> 00FCA040 + 374 \\r\\n\\r\\nSo the current Weapon offset is 374.\\r\\n\\r\\nWe still have to find the weapon damage, and We will do it with REClass, it will look like this:\\r\\n\\r\\n![AssaultCubeWeaponDmg](./weaponDmg1.PNG)\\r\\n\\r\\n![AssaultCubeWeaponDmg](./weaponDmg2.PNG)\\r\\n\\r\\nAs we can see there are a lot of properties beyond the weapon damage, but they need to be reversed.\\r\\n\\r\\n3) **HARD** (Recoil function with IDA):\\r\\n\\r\\nFrom the process showed for the weapon damage, We see that We found recoil too (after some testing).\\r\\n\\r\\nUsing that offset, on Cheat Engine we will find out what accesses to that address, go to disassembler, and retrieve the address:\\r\\n\\r\\n![Recoil](./recoil1.PNG)\\r\\n\\r\\nNow It\'s time for IDA.\\r\\n\\r\\nGoing to that address and Decompiling the assembly instructions We get this:\\r\\n\\r\\n![Recoil](./idarecoil1.PNG)\\r\\n\\r\\nConfusing right? It\'s not easy but with some practice everything will make sense.\\r\\n\\r\\nAfter reversing it (I\'m not gonna explain the whole process because I\'m not the one that should teach you these things):\\r\\n\\r\\n![Recoil](./idarecoil2.PNG)\\r\\n\\r\\n(IDA fucked up the indentation)\\r\\n\\r\\nAs we can see, there is a multilevel pointers calculation to go to the recoil offset, now We can conclude that the instruction where We need to operate on is this one.\\r\\n\\r\\nTo implement no recoil, We can just simply nop this instruction. (**nopping** is pratically \\"hiding\\" that particular instruction without impacting the whole program, and that instruction will never be executed).\\r\\n\\r\\nI hope that you liked this little post :)"},{"id":"journey-1","metadata":{"permalink":"/REwithGraffioh/journey-1","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-07-the-journey-so-far/2022-06-07-the-journey-so-far.md","source":"@site/blog/2022-06-07-the-journey-so-far/2022-06-07-the-journey-so-far.md","title":"The journey so far","description":"The focus of this journey is to get a good understanding of how an anti-cheat work and how to develop it especially for FPS games.","date":"2022-06-06T15:00:00.000Z","formattedDate":"June 6, 2022","tags":[{"label":"game-hacking","permalink":"/REwithGraffioh/tags/game-hacking"},{"label":"reversing","permalink":"/REwithGraffioh/tags/reversing"},{"label":"journey","permalink":"/REwithGraffioh/tags/journey"}],"truncated":false,"authors":[],"frontMatter":{"slug":"journey-1","title":"The journey so far","tags":["game-hacking","reversing","journey"],"date":"2022-06-06T15:00"},"prevItem":{"title":"Reversing Assault Cube (v1.2.0.2)","permalink":"/REwithGraffioh/2022/06/09/reversing-assault-cube"},"nextItem":{"title":"About me","permalink":"/REwithGraffioh/aboutme"}},"content":"import ReactPlayer from \'react-player\'\\n\\nThe focus of this journey is to get a good understanding of how an anti-cheat work and how to develop it especially for FPS games.\\n\\nEven though I have university, I preferred to do a \\"side\\" project instead of studying only for the exams, because **for me**, if you will graduate without any side project, you wont get very far.\\n\\nSo lets Begin!\\n\\nI started with tutorials on [Cheat Engine](https://cheatengine.org/), a powerful memory tool for game hackers that is really straightforward.\\n\\nFrom there I got a lot of knowledge, from the basic memory concepts to assembly and reverse engineering.\\n\\nAfter having a good level of confidence with CE (Cheat engine), I started to look for cheat forums as I wanted to go more in depth with External/Internal Cheats.\\n\\nI stumbled across [Unknown Cheats](https://www.unknowncheats.me/forum/index.php) and [Guided Hacking](https://guidedhacking.com/). I saw that Guided Hacking changed during the time, it was completely free, but now you need to donate like 15 euros to view posts and download sources.\\n\\nI wasn\'t really into it, I didn\'t want to spend money for things that you can actually learn for free in these days, so I went for Unknown Cheats.\\n\\nThere I started basic external tutorials, with Windows API, in concomitance with [Windows Internals](https://www.amazon.com/Windows-Internals-Part-architecture-management/dp/0735684189/ref=sr_1_1?crid=VCH9SCIRFZDR&keywords=windows+internals+part+1&qid=1654597554&s=books&sprefix=windows+internals+part%2Cstripbooks-intl-ship%2C140&sr=1-1), a really great book by Pavel Yosifovich.\\n\\nI really liked studying these things, so I decided to donate to Guided Hacking for a yearly subscription, as they had a really good \\"path\\" to follow.\\n\\n![Spongebob](./spongebob-RE-meme.png)\\n\\nAfter some experience with External cheats and C++, I went into Internal Cheats as I liked it more, yeah....I like pointers.\\n\\nIn addition to getting experience with Internal Cheats and C++, I started using [REClass.NET](https://github.com/ReClassNET/ReClass.NET/tree/96b36cf7a97d41863b6d75098f681615884d55f7), debuggers like [x64dbg](https://x64dbg.com/) and a disassembler.\\n\\nFor the disassembler I use IDA. (not Ghidra because for IDA there a lot of resources online + plugins).\\n\\nFollowing Guided Hacking tutorial I reversed [Assault Cube](https://assault.cubers.net/), and made an Internal cheats with No recoil, flyhack, god mode and other things, some of them works in multiplayers and some of them don\'t.\\n\\nNow I am \\"reversing\\" CS:GO (of course still following tutorials but not copy-pasting), with quite a bit of difficulty, but I\'m sure I will get through this too.\\n\\nThis is not an easy journey, and I like hard things (no contradictions).\\n\\nAssault Cube trainer example\\n\\n<ReactPlayer player controls url=\'https://www.youtube.com/watch?v=huTILhprxls\' />\\n\\n<br/>\\n\\n*Off-Topic*: Miura\'s friend just announced that Him and Miura\'s assistants will resume the serialization of Berserk!!"},{"id":"aboutme","metadata":{"permalink":"/REwithGraffioh/aboutme","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-06-About/index.md","source":"@site/blog/2022-06-06-About/index.md","title":"About me","description":"I\'m Umberto, 19 years old from Italy, Computer Science student and passionate about Reverse engineering.","date":"2022-06-06T10:00:00.000Z","formattedDate":"June 6, 2022","tags":[{"label":"about","permalink":"/REwithGraffioh/tags/about"}],"truncated":false,"authors":[],"frontMatter":{"slug":"aboutme","title":"About me","tags":["about"],"date":"2022-06-06T10:00"},"prevItem":{"title":"The journey so far","permalink":"/REwithGraffioh/journey-1"}},"content":"I\'m Umberto, 19 years old from Italy, Computer Science student and passionate about Reverse engineering.\\n\\nWith this blog I want to do a sort of journal through my journey about game hacking.\\n\\n**(FOR EDUCATIONAL PURPOSE ONLY!)**\\n\\nI\'ve never wrote a blog before or documented anything online, so this is my first time.\\n\\nI hope you enjoy. Feel free to suggest anything with a DM on twitter: @graffioh.\\n\\n![castle](./griffith-castle.jpg)"}]}')}}]);